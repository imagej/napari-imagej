napari-imagej Architecture
==========================

napari-imagej is divided into a few components, described briefly below:

The napari-imagej Widget
------------------------

The napari-imagej widget provides the ability to access the ImageJ ecosystem from within napari.

Menu
####

The napari-imagej menu provides buttons used to:

* `Configure <./Configuration.html>`_ the backing ImageJ2 distribution
* Launch the ImageJ UI
* Transfer data between the ImageJ and napari user interfaces

The usage of these buttons is shown below:

.. figure:: ./doc-images/napari-imagej_menu_usage.png
    :scale: 50 %

    The ImageJ button in the napari-imagej toolbar launches the ImageJ user interface. From this interface, any ImageJ ecosystem routine can be executed, including third-party plugins. Data, including multi-channel images, can be passed between the napari and ImageJ interfaces using the transfer buttons, also located in the napari-imagej toolbar.

Search Bar, Results Tree and Result Runner
##########################################

The remaining components of the napari-imagej widget enable the user to execute ImageJ ecosystem functionality *without* launching the ImageJ UI.

The searchbar is used to identify ecosystem functionality through keywords; napari-imagej will populate the results tree with routines matching the keywords provided in the search bar.

When the user selects a routine in the results tree, the result runner at the bottom of the widget will provide a set of actions pertaining to the selection. These actions might include:

* Executing the routine (either through a new window widget, shown below, or through a modal dialog)
* Viewing the routine source code
* Viewing the routine's `wiki page <https://imagej.net/>`_

The usage of these components is shown below:

.. figure:: ./doc-images/napari-imagej_search_usage.png
    :scale: 50 %

    Headless ImageJ ecosystem routines are executable directly from the napari interface by typing search terms into the napari-imagej search bar. A napari widget for executing a routine can then be generated by selecting any of the corresponding results shown in the panel beneath.



Type Logic and Type Converters
------------------------------

To call ImageJ routines on Python data structures, we require two additional steps when calling any ImageJ routine:

#. *Before calling the routine* we must convert the provided Python objects into equivalent Java objects.
#. *After calling the routine* we must convert the returned Java objects into equivalent Python objects.

Without the first step, ImageJ would not understand the user's arguments. Without the second step, napari would not understand the routine's outputs.

napari-imagej implements both of these steps transparently as shown below, through the use of a type conversion layer. User inputs from Module widgets are converted to Java equivalents before the ImageJ routine is called. Routine outputs are converted to Python equivalents before those outputs are provided back to the user.

.. figure:: ./doc-images/napari-imagej_data_conversion.png
    :scale: 50 %

To convert inputs, the data conversion layer maintains a list of conversion functions :math:`\{P_i:p_i\rightarrow j_i\}` used to convert objects of Python type :math:`p_i` into objects of Java type :math:`j_i`. As an example, one such function might convert napari ``Image`` layers into imglib2 ``Img``\s.

To convert outputs, the layer maintains a similar set of conversion functions :math:`\{J_i:j_i\rightarrow p_i\}` used to convert objects of java type :math:`j_i` into Python type :math:`p_i`. For example, one such function might convert imglib2 ``Img``\s into napari ``Image`` layers.

napari-imagej will only allow ImageJ routines to be called if it can map **each** Python input to some function :math:`P_i`, and **each** Java output to some function :math:`J_i`. When those routines are called, the following steps occur:

#. Each input is passed to its corresponding input converter :math:`P_i`
#. The ImageJ routine is called on the returns of the inputs converters
#. Each routine output is passed to its corresponding output converter :math:`J_i`
#. The returns of the output converters are provided back to the user

The backing PyImageJ instance
-----------------------------
    
Without access to a backing `ImageJ2 <https://imagej.net/software/imagej2/>`_ instance, napari-imagej could not execute ImageJ ecosystem functionality. The `PyImageJ <https://pyimagej.readthedocs.io/en/latest/>`_, able to provide ImageJ2 access in Python, is napari-imagej's gateway to this functionality.

By using the settings button in the napari-imagej `menu <#menu>`_, this backing instance can be configured to enable ImageJ, ImageJ2, Fiji, and third-party functionality. Please see the `configuration documentation <./Configuration.html>`_ for more information.
